#+TITLE:     Ashmem Analysis
#+AUTHOR:    yannik
#+EMAIL:     yannik520@gmail.com
#+DATE:      2012-08-29 ä¸‰
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+STYLE: <link rel="stylesheet" type="text/css" href="./style.css" />

* Code Analysis
** Important data struct
A "area" cache and a "range" cache are created first in ashmem\_init(), and then register a misc device named ashmem, at last, using register\_shrinker() register a callback, there are two important struct in the code as following:
#+BEGIN_SRC c
/*
 * ashmem_area - anonymous shared memory area
 * Lifecycle: From our parent file's open() until its release()
 * Locking: Protected by `ashmem_mutex'
 * Big Note: Mappings do NOT pin this structure; it dies on close()
 */
struct ashmem_area {
	char name[ASHMEM_FULL_NAME_LEN]; /* optional name in /proc/pid/maps */
	struct list_head unpinned_list;	 /* list of all ashmem areas */
	struct file *file;		 /* the shmem-based backing file */
	size_t size;			 /* size of the mapping, in bytes */
	unsigned long prot_mask;	 /* allowed prot bits, as vm_flags */
};

/*
 * ashmem_range - represents an interval of unpinned (evictable) pages
 * Lifecycle: From unpin to pin
 * Locking: Protected by `ashmem_mutex'
 */
struct ashmem_range {
	struct list_head lru;		/* entry in LRU list */
	struct list_head unpinned;	/* entry in its area's unpinned list */
	struct ashmem_area *asma;	/* associated area */
	size_t pgstart;			/* starting page, inclusive */
	size_t pgend;			/* ending page, inclusive */
	unsigned int purged;		/* ASHMEM_NOT or ASHMEM_WAS_PURGED */
};
#+END_SRC 
** The init flow of ashmem
In ashmem\_init() function, using the following steps to prepare all needed:
+ A area cache created first with kmem\_cache\_create()\\
which is named "ashmem\_area\_cache", add object size is the size of struct ashmem\_area.
+ A range cache create as above
+ registered a misc dist for exporting a interface to user\\
after this step, user can access /dev/ashmem device with open, read, mmap, and other file operation to use the ashmem.
+ Register a shrinker hook\\
At the end of ashmem\_init(), it is register a shrinker with register\_shrinker() to reclaime the freed area.
** The overview of ashmem
after open the ashmem device, user can use ioctl to pin and unpin a area, if the range is unpined, the area can be purged by system, and purged is assigned from ASHMEM\_NOT\_PURGED to ASHMEM\_WAS\_PURGED, and the code architecture as following:\\
[[./ashmem_basic_struct.gif]]\\
Above graph come from: http://www.linuxidc.com/Linux/2011-09/42212.htm

* How to use in user space
+ Open the shmem first
#+BEGIN_SRC c
	int fd, ret;
	char buf[ASHMEM_NAME_LEN];
	
	fd = open(ASHMEM_DEVICE, O_RDWR);
	if (fd < 0)
		return fd;

	strncpy(buf, name, sizeof(name) + 1);
	ret = ioctl(fd, ASHMEM_SET_NAME, buf);
	if (ret < 0)
		goto error;
	
	ret = ioctl(fd, ASHMEM_SET_SIZE, size);
	if (ret < 0)
		goto error;

	return fd;

error:
	close(fd);
	return ret;
#+END_SRC
* Remap the area to process address
#+BEGIN_SRC c
	size = ioctl(fd, ASHMEM_GET_SIZE, NULL);
	printf("size=%d\n", size);
	
	mAddress = (unsigned int *)mmap(NULL, LENGTH, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
	if (mAddress < 0)
		printf("mmap failed\n");
#+END_SRC

* Read/Write the area directly
#+BEGIN_SRC c
	if (ashmem_pin_region(fd, 0, 0) == ASHMEM_WAS_PURGED)
	{
		printf("ashmem was purged\n");
		return -1;
	}
	printf("%s: address=0x%x, buffer=0x%x\n", __FUNCTION__,  (unsigned int)address, (unsigned int)buffer);
	memcpy(buffer + src_offset, (unsigned char *)address + dest_offset, count);
	
	return count;
#+END_SRC

#+BEGIN_SRC c
	if (ashmem_pin_region(fd, 0, 0) == ASHMEM_WAS_PURGED)
	{
		printf("ashmem was purged\n");
		return -1;
	}

	memcpy((unsigned char *)address + dest_offset, buffer + src_offset, count);

	return count;
#+END_SRC
whole file: [[./ashmem_and_sharefile/ashmem_app.c][ashmem\_app.c]]

* How to share the ashmem between two process
In order to share the ashmem, one process must open the ashmem first, and share the file handler to the other process, then the process can use the file handle to mmap the area to it's own process address, after remaped the area, can read/write the area directly.
The key work is how to share the file handle to other process. in task struct there is a field to save all opened the file.so i wrote a driver to do the work, to pass the fd from one to another, the driver as following:
[[./ashmem_and_sharefile/share_file.c][Share File Handle Driver]]
to have a test with following steps:
+ compile the share file driver in kernel(shfile\_file.c and shfile\_file.h)
+ use kexec to run the kernel directly
+ make the ashmem\_app
+ open two terminal, one run "ashmem\_app s" as a server, and the other run "ashmem\_app c" as a client.
